---
title: "Analyzing the Kasa Romana Lottery with Knapsack Algorithm [Updated]"
author: "Maciej Nasinski"
date: "2023-04-08"
categories: [knapsack, rprogramming]
image: main.png
filters:
  - webr
---

TL;DR If you want to design the perfect lottery where participants believe they have a chance to win but can never actually do so, you'll need the expertise of a skilled mathematician. However, with enough data, a capable statistical programmer can unravel the mechanism and expose the illusion.

**Updated 2025-01-05**

## Introduction

**Kasa Romana** is a well-known lottery in Poland, organized by the Amino food company. Originating in the 1990s, this lottery gives participants the chance to win cash prizes by collecting coupons that sum up to round hundreds, up to 1000 PLN. In this blog post, we delve into the data from the last Kasa Romana event, held in 2016, and analyze it using the **Knapsack Algorithm** implemented in R.

The data for this analysis was meticulously gathered by [BezKanalu](https://www.facebook.com/BezKanalu/), a popular Polish YouTube channel known for testing promotional products. They collected an impressive 1002 coupons from the final event, providing a robust dataset to explore. The goal? To uncover patterns in the data and assess whether these coupons could realistically lead to a monetary win.

To tackle this challenge, I utilized the Knapsack Algorithm, a well-established optimization technique. The algorithm identifies the optimal way to select items (in this case, coupons) that meet specific constraints (summing to full hundreds) while maximizing value. Using R, I implemented this algorithm to determine if any subset of the collected coupons could satisfy the winning conditions of the lottery.

Surprisingly, the analysis revealed that **no combination of coupons from the dataset allowed participants to win real money**. This finding was further reinforced through a theoretical proof using modular arithmetic.

In conclusion, this blog post highlights the power of the Knapsack Algorithm as a tool for solving complex optimization problems like the Kasa Romana lottery. The analysis not only sheds light on the patterns and limitations of the lottery but also demonstrates how programming and mathematical approaches can provide valuable insights into real-world scenarios.

## Apply Knapsack Algorithm on Lottery Coupons

First we will define the lottery coupons and analyze them.  
It is worth to try to understand the data patterns before running the Knapsack Algorithm.

```{webr-r}
#| read-only: true
#| editor-max-height: 200

coupons <- c(455L, 650L, 26L, 464L, 26L, 750L, 490L, 520L, 399L, 390L, 750L, 
455L, 104L, 260L, 26L, 438L, 633L, 455L, 195L, 516L, 598L, 481L, 
299L, 724L, 243L, 26L, 533L, 455L, 572L, 208L, 520L, 130L, 455L, 
26L, 650L, 581L, 412L, 559L, 260L, 455L, 637L, 750L, 130L, 338L, 
321L, 26L, 555L, 26L, 338L, 611L, 65L, 26L, 490L, 195L, 260L, 
390L, 260L, 455L, 750L, 399L, 455L, 429L, 750L, 416L, 533L, 533L, 
750L, 273L, 572L, 273L, 750L, 130L, 455L, 325L, 750L, 455L, 611L, 
750L, 416L, 269L, 455L, 542L, 26L, 130L, 52L, 260L, 191L, 438L, 
650L, 737L, 217L, 308L, 390L, 529L, 260L, 546L, 351L, 78L, 624L, 
243L, 26L, 321L, 65L, 412L, 338L, 130L, 65L, 650L, 412L, 130L, 
351L, 130L, 455L, 117L, 156L, 520L, 650L, 78L, 737L, 351L, 442L, 
750L, 650L, 321L, 650L, 282L, 260L, 468L, 312L, 117L, 750L, 451L, 
26L, 412L, 412L, 750L, 217L, 260L, 672L, 750L, 286L, 750L, 724L, 
750L, 438L, 533L, 438L, 260L, 533L, 750L, 26L, 260L, 52L, 455L, 
130L, 585L, 295L, 26L, 750L, 516L, 39L, 260L, 104L, 373L, 26L, 
572L, 26L, 438L, 78L, 390L, 750L, 390L, 204L, 650L, 650L, 572L, 
130L, 260L, 26L, 130L, 364L, 611L, 594L, 260L, 750L, 503L, 91L, 
672L, 559L, 455L, 455L, 260L, 169L, 750L, 390L, 299L, 650L, 516L, 
468L, 598L, 221L, 26L, 494L, 273L, 390L, 594L, 26L, 390L, 260L, 
399L, 750L, 195L, 425L, 26L, 26L, 351L, 308L, 230L, 26L, 607L, 
650L, 637L, 568L, 390L, 572L, 65L, 26L, 273L, 26L, 165L, 386L, 
750L, 650L, 130L, 529L, 182L, 130L, 130L, 390L, 234L, 390L, 650L, 
624L, 438L, 390L, 373L, 26L, 26L, 260L, 750L, 455L, 546L, 390L, 
26L, 750L, 412L, 26L, 26L, 711L, 429L, 711L, 195L, 390L, 611L, 
542L, 390L, 750L, 412L, 26L, 490L, 568L, 481L, 169L, 260L, 78L, 
711L, 520L, 195L, 659L, 26L, 260L, 442L, 455L, 247L, 542L, 26L, 
650L, 750L, 217L, 672L, 269L, 750L, 260L, 39L, 425L, 26L, 26L, 
39L, 130L, 520L, 282L, 299L, 269L, 750L, 750L, 750L, 299L, 685L, 
390L, 39L, 624L, 533L, 260L, 455L, 26L, 208L, 390L, 338L, 65L, 
130L, 338L, 750L, 260L, 477L, 390L, 52L, 546L, 455L, 351L, 546L, 
217L, 221L, 243L, 390L, 117L, 260L, 256L, 390L, 78L, 737L, 104L, 
143L, 412L, 750L, 581L, 585L, 750L, 130L, 750L, 390L, 464L, 650L, 
191L, 26L, 494L, 425L, 737L, 477L, 312L, 26L, 130L, 221L, 26L, 
529L, 650L, 611L, 546L, 750L, 165L, 334L, 399L, 650L, 169L, 312L, 
750L, 325L, 130L, 52L, 91L, 26L, 260L, 750L, 26L, 455L, 338L, 
273L, 117L, 650L, 377L, 542L, 750L, 390L, 659L, 26L, 165L, 672L, 
39L, 390L, 26L, 390L, 455L, 568L, 529L, 312L, 650L, 455L, 451L, 
403L, 455L, 26L, 260L, 26L, 26L, 156L, 750L, 750L, 455L, 555L, 
299L, 260L, 607L, 455L, 620L, 390L, 750L, 260L, 243L, 295L, 390L, 
455L, 594L, 546L, 130L, 260L, 390L, 260L, 568L, 650L, 286L, 243L, 
598L, 607L, 438L, 308L, 650L, 455L, 455L, 130L, 390L, 260L, 477L, 
481L, 165L, 130L, 659L, 650L, 26L, 91L, 295L, 52L, 555L, 650L, 
546L, 390L, 386L, 737L, 26L, 390L, 685L, 130L, 91L, 477L, 26L, 
455L, 52L, 685L, 26L, 130L, 390L, 390L, 520L, 143L, 26L, 455L, 
585L, 455L, 455L, 646L, 390L, 750L, 455L, 390L, 260L, 542L, 650L, 
91L, 39L, 390L, 312L, 26L, 750L, 260L, 455L, 442L, 494L, 416L, 
598L, 260L, 572L, 455L, 39L, 65L, 351L, 611L, 455L, 230L, 52L, 
750L, 65L, 273L, 650L, 724L, 598L, 568L, 26L, 26L, 26L, 455L, 
195L, 117L, 750L, 750L, 698L, 390L, 130L, 130L, 91L, 182L, 269L, 
750L, 260L, 26L, 455L, 750L, 234L, 650L, 256L, 325L, 260L, 26L, 
169L, 542L, 26L, 455L, 750L, 442L, 256L, 611L, 412L, 130L, 455L, 
412L, 130L, 165L, 399L, 260L, 750L, 477L, 26L, 130L, 650L, 425L, 
455L, 455L, 581L, 464L, 698L, 425L, 624L, 26L, 117L, 598L, 130L, 
529L, 438L, 559L, 390L, 130L, 217L, 468L, 750L, 750L, 347L, 308L, 
516L, 260L, 312L, 52L, 390L, 230L, 373L, 390L, 260L, 191L, 620L, 
52L, 650L, 130L, 750L, 750L, 347L, 585L, 243L, 490L, 282L, 282L, 
750L, 325L, 26L, 273L, 455L, 377L, 750L, 507L, 455L, 455L, 724L, 
390L, 650L, 221L, 585L, 442L, 637L, 295L, 438L, 520L, 750L, 425L, 
347L, 247L, 26L, 750L, 295L, 698L, 169L, 130L, 260L, 520L, 559L, 
455L, 750L, 91L, 750L, 347L, 312L, 260L, 130L, 321L, 455L, 26L, 
26L, 442L, 143L, 750L, 633L, 26L, 360L, 607L, 390L, 737L, 156L, 
26L, 750L, 750L, 516L, 191L, 78L, 455L, 455L, 156L, 455L, 360L, 
191L, 455L, 464L, 130L, 650L, 507L, 559L, 546L, 52L, 26L, 425L, 
390L, 533L, 260L, 559L, 650L, 468L, 230L, 282L, 750L, 26L, 555L, 
26L, 568L, 130L, 533L, 260L, 455L, 581L, 750L, 26L, 260L, 455L, 
659L, 750L, 191L, 750L, 650L, 624L, 451L, 26L, 26L, 399L, 390L, 
117L, 503L, 455L, 78L, 750L, 659L, 503L, 494L, 321L, 256L, 637L, 
26L, 520L, 520L, 455L, 347L, 650L, 750L, 182L, 455L, 247L, 659L, 
130L, 386L, 503L, 260L, 26L, 572L, 386L, 529L, 533L, 750L, 650L, 
195L, 750L, 477L, 455L, 650L, 425L, 130L, 455L, 243L, 455L, 26L, 
260L, 585L, 624L, 546L, 650L, 416L, 711L, 555L, 455L, 455L, 750L, 
594L, 542L, 282L, 234L, 230L, 750L, 750L, 494L, 26L, 390L, 455L, 
650L, 221L, 455L, 390L, 325L, 650L, 750L, 143L, 416L, 26L, 299L, 
130L, 377L, 26L, 260L, 750L, 542L, 130L, 455L, 750L, 737L, 390L, 
182L, 347L, 477L, 78L, 555L, 442L, 598L, 351L, 26L, 503L, 750L, 
39L, 243L, 455L, 750L, 26L, 26L, 130L, 429L, 455L, 568L, 130L, 
455L, 26L, 650L, 650L, 555L, 438L, 650L, 416L, 650L, 243L, 455L, 
260L, 390L, 650L, 455L, 130L, 650L, 555L, 416L, 724L, 260L, 130L, 
685L, 650L, 455L, 542L, 260L, 130L, 637L, 425L, 412L, 390L, 724L, 
26L, 130L, 529L, 165L, 26L, 555L, 321L, 204L, 390L, 130L, 195L, 
390L, 26L, 26L, 260L, 156L, 260L, 312L, 130L, 130L, 338L, 39L, 
390L, 750L, 451L, 650L, 130L, 412L, 390L, 464L, 455L, 260L, 130L, 
373L, 230L, 650L, 286L, 130L, 442L, 243L, 26L, 308L, 390L, 750L, 
26L, 243L, 26L, 182L, 685L, 750L, 26L, 221L, 321L, 295L, 585L, 
650L, 364L, 750L, 659L, 650L, 711L, 633L, 26L, 26L, 347L, 260L, 
750L, 260L, 624L, 286L, 260L, 230L, 260L, 295L, 442L, 26L, 130L, 
390L, 243L, 386L, 26L, 598L, 325L, 503L, 130L, 260L, 364L, 672L, 
429L, 247L, 273L, 39L, 117L, 637L, 260L, 598L, 750L, 169L, 130L, 
260L, 286L, 260L, 260L, 750L, 750L, 273L, 182L, 130L, 260L, 130L, 
412L, 451L, 191L, 390L, 438L, 516L, 130L, 650L, 750L, 750L, 26L, 
295L, 390L, 26L, 26L, 750L, 390L, 347L, 377L, 156L, 78L, 516L, 
594L)
```

Sorted unique values:

```{webr-r}
sort(unique(coupons))
```

Sorted table of frequencies:

```{webr-r}
sort(table(coupons))
```

Histrogram might be helpful to find certain patterns:

```{webr-r}
hist(coupons, breaks = 100)
```

**Numbers seems to be generated from 2 specific patterns:**

- multiplication of 13 starting from 26
- multiplication of 13 plus 165

We can easily confirm that all of the coupons comes from this 2 sequences.

```{webr-r}
rep13 <- 13 * 1:52

rep2_13 <- 165 + (13 * 0:45)

all(coupons %in% c(rep13, rep2_13))
```

### Single Knapsack Problem

Knapsack is an optimization method, linear programming for integers.
Each of 1000 coupons is replicated 10 times before the procedure. 
This replication step is not needed to get this certain results although it will be even more convincing. Remainder, I was looking for set of coupons which sum to full hundreds (100, 200, ...) up to 1000.

```{webr-r}
# adagio can not be downloaded in the WebR R console
library(adagio)

cupon_we_have = rep(coupons, 10)

amount_we_want = seq(100, 1000, 100)

for (i in amount_we_want) {
  solution <- try(
    knapsack(
      p = cupon_we_have[cupon_we_have<i], 
      w = cupon_we_have[cupon_we_have<i], 
      cap = i
    )
  )
  
  print(sprintf("Best result for %s reward is %s", i, solution$profit))
}
```

Taking into account only coupons provided there is NO chance to win anything.  
This seems to no be surprising when we know from what sequences the coupons come from.  

### Theoretical Proof: Modular Arithmetic Analysis

While the Knapsack algorithm provides computational evidence, I also used theoretical modular arithmetic to validate this result mathematically. 

#### Key Sequences

The coupon values are derived from two modular arithmetic sequences:

1. **Sequence 1**: Residues of $13k \mod 100$ for $k \in \mathbb{Z}$:
  
$$
S_1 = \{13, 26, 39, 52, 65, 78, 91, 4, 17, 30, \dots\}.
$$

2. **Sequence 2**: Residues of $165 + 13b \mod 100$, rewritten as $65 + 13b \mod 100$ for $b \in \mathbb{Z}$:
  
$$
S_2 = \{65, 78, 91, 4, 17, 30, 43, \dots\}.
$$

#### Sum of Coupons

Any sum of coupons from $S_1 \cup S_2$ can be expressed as:

$$
\text{Sum} = 13 \left( \sum k_i + \sum b_j \right) + \sum c_j \mod 100,
$$

where:  
- $\sum k_i$ comes from $S_1$,  
- $\sum b_j$ comes from $S_2$,  
- $\sum c_j$ represents offsets `0` for $S_1$, `65` for $S_2$.

Factoring `13`:

$$
\text{Sum} = 13 \left( \sum k_i + \sum b_j \right) + \sum c_j \mod 100.
$$

#### Why No Sum Can Sum Up to Full Hundreds

The number `13` is **coprime to 100**, meaning their greatest common divisor is `1`. 
As a result Multiples of `13` mod `100` complete residue cycle:
$\{13, 26, 39, 52, 65, 78, 91, 4, 17, 30, \dots\}$.
This sequence never includes $0 \mod 100$ because multiples of `13` mod `100` has no integer solutions.
Thus, $13 \left( \sum k_i + \sum b_j \right) \mod 100$ also cannot equal $0 \mod 100$ (sum to full hundreds).

The term $\sum c_j$ introduces a shift, but it does not affect the impossibility of summing to $0 \mod 100$. **Offsets from $S_2$:** The offsets $(c_j = 65$ for $S_2$ shift the residue cycle of $13 \left( \sum k_i + \sum b_j \right)$, creating $13 \left( \sum k_i + \sum b_j \right) + 65 \mod 100.$
This shifted cycle is still disjoint from $0 \mod 100$ because the original cycle of $13k \mod 100$ does not include `0`. For other shifts (e.g., `1`, `11`, or any value), the term $\sum c_j$ merely shifts the residue cycle, but since $13k \mod 100$ cannot align with $0$, no shift can create $0 \mod 100$.

## Conclusion

The Knapsack Algorithm computationally confirms that no combination of Kasa Romana lottery coupons can sum up to full hundreds, making it impossible to meet the winning criteria. This conclusion is further validated by a theoretical proof using modular arithmetic, adding credibility and mathematical rigor to the findings.

---
title: "Graph DB"
author: "Maciej Nasinski"
date: "2024-07-19"
engine: knitr
image: main.png
categories: [programming]
---

TL;DR Graph databases have emerged as a crucial technology for managing and analyzing data that is highly interconnected. Unlike traditional relational databases that store data in tables, graph databases use a graph structure to represent and store data, making them exceptionally powerful for applications that involve complex relationships and connections.

[Please access the ready Graph DB playground](https://github.com/Polkas/graphdb-playground)

**Update: 2025-01-20**

## What is a Graph Database?

A graph database uses a graph structure to represent data. This structure comprises three main components:

- **Nodes:** These represent entities such as people, places, or objects. Each node can contain properties (key-value pairs) that store information about the entity.
- **Edges:** These represent the relationships between nodes. Each edge can also have properties that provide information about the relationship.
- **Properties:** Additional pieces of information associated with nodes and edges, similar to columns in a relational database table.

This graph-based structure allows for intuitive and efficient querying of complex relationships, making graph databases ideal for scenarios where data is interconnected.

## Types of Graph Databases

### Property Graphs

- **Nodes and Edges:** Nodes and edges in property graphs can have multiple properties.
- **Flexibility:** Property graphs are highly flexible and can model a wide range of scenarios.

**Examples:** Neo4j, Amazon Neptune, and Microsoft Azure Cosmos DB.

### RDF (Resource Description Framework) Graphs

- **Triple-Based Structure:** RDF graphs use a subject-predicate-object structure to represent data.
- **Semantic Web:** Often used in semantic web and linked data applications.

**Examples:** Neo4j, Apache Jena, Virtuoso, and Stardog.

## Use Cases of Graph Databases

- **Social Networks:** Representing and querying connections between users.
- **Recommendation Engines:** Analyzing user preferences and interactions to provide personalized recommendations.
- **Fraud Detection:** Identifying suspicious patterns and relationships in financial transactions.
- **Knowledge Graphs:** Integrating and managing complex knowledge domains.

## Popular Graph Database Solutions

- **Neo4j:** A leading property graph database known for its performance and scalability. It uses Cypher as its query language.
- **Amazon Neptune:** A managed graph database service supporting both property and RDF graphs.
- **Microsoft Azure Cosmos DB:** A multi-model database that supports property graphs using the Gremlin query language.
- **Apache Jena:** An open-source framework for building RDF applications.
- **Virtuoso:** A multi-model data server that supports RDF graphs.
- **Stardog:** A knowledge graph platform supporting both RDF and property graph models.

## Example: Graph DB playground

This example demonstrates a comprehensive workflow for working with a graph database. It includes defining a schema, inserting data, querying data, performing advanced queries, and running graph algorithms. 

[Please access the ready Graph DB playground](https://github.com/Polkas/graphdb-playground)

## The Journey to GQL

The journey to establish GQL as a standard began in September 2019 and culminated in March 2024 with the unanimous approval of the Final Draft International Standard (FDIS) ballot. This milestone signifies GQL's official status as an ISO standard, placing it alongside SQL in the world of database query languages.

GQL (Graph Query Language) is designed to be the standard query language for graph databases. It aims to unify various graph query languages, drawing significant inspiration from existing languages like Cypher. GQL provides a declarative syntax that allows users to describe what data to retrieve rather than how to retrieve it, similar to SQL but optimized for graph data.

- **Declarative Syntax:** GQL uses a declarative approach, making it easier for users to express complex queries.
- **Flexibility:** It is designed to work with various types of graph databases, including property graphs and RDF graphs.
- **Interoperability:** GQL promotes interoperability between different graph database systems, reducing fragmentation in the graph database landscape.

The introduction of GQL marks a significant advancement in the world of graph databases. As an ISO standard, GQL provides a unified and powerful query language that enhances interoperability and usability. With the support of leading graph database platforms like Neo4j, GQL is set to transform how we interact with graph data, driving innovation and efficiency in data management.

## Conclusion

Graph databases have emerged as a crucial technology for managing and analyzing data that is highly interconnected. Unlike traditional relational databases that store data in tables, graph databases use a graph structure to represent and store data, making them exceptionally powerful for applications that involve complex relationships and connections.

## References

- [Graph DB playground](https://github.com/Polkas/graphdb-playground)
- [Graph Databases for Beginners (Neo4j)](https://neo4j.com/graph-databases-for-beginners/)
- [Cypher Query Language Overview](https://opencypher.org/)
- [ISO GQL Standard](https://www.iso.org/standard/76120.html)
- [Neo4j's Role in GQL Development](https://neo4j.com/developer/gql/)
- [GraphQL Foundation: Evolution of GQL](https://www.graphql.org)
- [The GQL Standard Proposal](https://arxiv.org/abs/2009.03000)


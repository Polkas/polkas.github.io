{
  "hash": "322bbd77eda4ecedfc9d3afc3a5a57ea",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"ggcall: Transparent R Packages with ggplot2\"\nformat: html\ndate: \"2024-04-13\"\nengine: knitr\ncategories: [rprogramming]\n---\n\n\n\n\nTL;DR Two functions in ggplot2 are overwritten (ggplot and +) to achieve code transparency and reproducibility when ggplot2 is used inside a function. It is believed that merging ggcall-like into ggplot2 can significantly enhance its functionality and accessibility, benefiting the entire R community. Powered by metaprogramming.\n\n### Overview of ggcall\n\n`ggcall` enhances `ggplot2` by allowing developers to retrieve the complete code used to generate a `ggplot` object. This is particularly invaluable when the original code is buried within other package internals or when dealing with multi-layered, complex plotting logic. The ability to access and understand the underlying `ggplot2` code not only aids in debugging and learning but also ensures that visualizations are transparent and reproducible across various use cases.\n\n[![](main.png)](https://github.com/Polkas/ggcall)\n\n### Practical Usage\n\nHere’s how simple it is to start with `ggcall`:\n\n```r\nlibrary(ggcall)\n# Example usage within your R package\ngg_plot <- your_function_that_creates_ggplot()\nplot_code <- ggcall(gg_plot)\nplot_code\n```\n\nThis functionality makes it a breeze for anyone developing or debugging complex visualizations within their packages.\n\n### Examples\n\n#### Example with a dummy function with ggplot2 code\n\n```r\nremotes::install_github(\"https://github.com/Polkas/ggcall\")\nlibrary(ggcall)\n\n# Example: Create a function which combines a few ggplot layers\n# Typically, it will be a function from your R package where you implemented ggcall\nfunc <- function(data, x, y, bool = TRUE) {\n  # layers have to be added with +\n  gg <- ggplot(data, aes(x=!!as.name(x), y=!!as.name(y))) +\n    geom_point(alpha = 0.4) +\n    facet_grid(~gear)\n    \n  if (bool) {\n    gg <- gg + theme(axis.title.x = element_blank())\n  }\n\n  func_internal <- function(gg) {\n    gg + labs(x = \"custom xlab\")\n  }\n\n  func_internal(gg)\n}\n\n# Retrieve the plot construction code\ngg_plot <- func(mtcars, \"wt\", \"mpg\")\nplot_call <- ggcall(gg_plot)\nplot_call\n# Optionally: Style the code with styler\nstyler::style_text(backports:::deparse1(plot_call))\n\n# Optional\n# Access call environment and/or use it to evaluate the call\nplot_call_env <- ggcall_env(plot_call)\nas.list(plot_call_env)\n# Reproduce the plot by evaluating the code\neval_ggcall(plot_call)\n# Optionally overwrite variables\neval_ggcall(plot_call, mtcars = mtcars[1:10, ], x = \"gear\")\n```\n\n#### Example implementation in GGally package\n\n`ggcall` was successfully integrated into popular R packages like `GGally`. Please take into account that `GGally` had already overwritten the + `ggplot2` function. Thus, the overwriting practice seems to be popular.\n\nThese implementations demonstrate `ggcall`’s versatility and its capability to enhance the functionality of existing packages.\n\ncheck out the inst/ggally.R in [the ggcall repository](https://github.com/Polkas/ggcall) for more details\n\n```r\nremotes::install_github(\"https://github.com/Polkas/ggally\")\nlibrary(GGally)\ndata(mtcars)\n# only ggmatrix related functions are not supported\ngg <- ggcorr(mtcars, method = \"everything\", label = TRUE)\ngg_code <- ggcall(gg)\nstyler::style_text(backports:::deparse1(gg_code))\n# Optional\n# Reproduce the plot by evaluating the code\neval_ggcall(gg_code)\n```\n\n### Why ggcall matters\n\nFor developers who build R packages that include functions generating `ggplot2` plots, maintaining clarity over how each plot is constructed can be challenging. `ggcall` addresses this by enabling:\n- **Code Tracking**: Extends the `+` operator and the `ggplot` function to maintain a history of plot construction.\n- **Accessible History**: Users can effortlessly access a sequence of `ggplot2` calls used to build plots, enhancing understanding and teaching opportunities.\n- **Reproducibility**: Facilitates the easy replication and modification of plots, which is essential for testing and extending visualizations.\n\n### Implementation Insights\n\nPlease check out README file for more information.\n\n### Join the ggcall Community\n\nVisit the [GitHub repository](https://github.com/Polkas/ggcall) to download `ggcall`, view detailed documentation, and start making your ggplot2 visualizations more transparent and reproducible today!\n\nYour feedback and contributions are highly appreciated as they help to refine `ggcall` to better serve the R community.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}